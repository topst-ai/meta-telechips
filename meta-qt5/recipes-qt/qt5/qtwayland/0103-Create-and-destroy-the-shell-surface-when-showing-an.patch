From 0d8d52cc7cc3e15ae11e967db4f940710c943509 Mon Sep 17 00:00:00 2001
From: Wily Taekhyun Shin <thshin@telechips.com>
Date: Thu, 17 Aug 2017 08:13:54 +0000
Subject: [PATCH] Create and destroy the shell surface when showing and hiding

---
 src/client/qwaylandshellsurface_p.h                |   5 +-
 src/client/qwaylandshmbackingstore.cpp             |   8 +-
 src/client/qwaylandwindow.cpp                      | 105 +++++++++++----------
 src/client/qwaylandwindow_p.h                      |   2 +
 src/client/qwaylandwlshellsurface.cpp              |  10 ++
 src/client/qwaylandwlshellsurface_p.h              |   6 +-
 src/client/qwaylandxdgpopup_p.cpp                  |   6 ++
 src/client/qwaylandxdgpopup_p.h                    |   2 +
 src/client/qwaylandxdgsurface.cpp                  |  19 ++--
 src/client/qwaylandxdgsurface_p.h                  |   5 +-
 .../client/wayland-egl/qwaylandeglwindow.cpp       |  10 ++
 .../client/wayland-egl/qwaylandeglwindow.h         |   4 +
 .../qwaylandxcompositeeglcontext.cpp               |   4 +-
 .../qwaylandxcompositeglxcontext.cpp               |   4 +-
 tests/auto/client/client/tst_client.cpp            |   4 +-
 15 files changed, 111 insertions(+), 83 deletions(-)

diff --git a/src/client/qwaylandshellsurface_p.h b/src/client/qwaylandshellsurface_p.h
index fc680ec..6046220 100644
--- a/src/client/qwaylandshellsurface_p.h
+++ b/src/client/qwaylandshellsurface_p.h
@@ -89,6 +89,8 @@ public:
 
     inline QWaylandWindow *window() { return m_window; }
 
+    virtual void setType(Qt::WindowType type, QWaylandWindow *transientParent) = 0;
+
 protected:
     virtual void setGeometry() {}
     virtual void setMaximized() {}
@@ -96,9 +98,6 @@ protected:
     virtual void setNormal() {}
     virtual void setMinimized() {}
 
-    virtual void setTopLevel() {}
-    virtual void updateTransientParent(QWindow * /*parent*/) {}
-
 private:
     QWaylandWindow *m_window;
     friend class QWaylandWindow;
diff --git a/src/client/qwaylandshmbackingstore.cpp b/src/client/qwaylandshmbackingstore.cpp
index 5c93d2b..df67d66 100644
--- a/src/client/qwaylandshmbackingstore.cpp
+++ b/src/client/qwaylandshmbackingstore.cpp
@@ -208,13 +208,7 @@ void QWaylandShmBackingStore::flush(QWindow *window, const QRegion &region, cons
 
     QMargins margins = windowDecorationMargins();
 
-    waylandWindow()->attachOffset(mFrontBuffer);
-    mFrontBuffer->setBusy();
-
-    QVector<QRect> rects = region.rects();
-    foreach (const QRect &rect, rects)
-        waylandWindow()->damage(rect.translated(margins.left(), margins.top()));
-    waylandWindow()->commit();
+    waylandWindow()->commit(mFrontBuffer, region.translated(margins.left(), margins.top()));
 }
 
 void QWaylandShmBackingStore::resize(const QSize &size, const QRegion &)
diff --git a/src/client/qwaylandwindow.cpp b/src/client/qwaylandwindow.cpp
index 04d066e..ddd6644 100644
--- a/src/client/qwaylandwindow.cpp
+++ b/src/client/qwaylandwindow.cpp
@@ -87,8 +87,6 @@ QWaylandWindow::QWaylandWindow(QWindow *window)
 {
     static WId id = 1;
     mWindowId = id++;
-    if (window->type() != Qt::Desktop)
-        initWindow();
 }
 
 QWaylandWindow::~QWaylandWindow()
@@ -117,18 +115,28 @@ QWaylandWindow::~QWaylandWindow()
 
 void QWaylandWindow::initWindow()
 {
-    init(mDisplay->createSurface(static_cast<QtWayland::wl_surface *>(this)));
+    if (window()->type() == Qt::Desktop)
+        return;
+
+    if (!isInitialized())
+        init(mDisplay->createSurface(static_cast<QtWayland::wl_surface *>(this)));
 
     if (shouldCreateSubSurface()) {
+        Q_ASSERT(!mSubSurfaceWindow);
+
         QWaylandWindow *p = static_cast<QWaylandWindow *>(QPlatformWindow::parent());
         if (::wl_subsurface *ss = mDisplay->createSubSurface(this, p)) {
             mSubSurfaceWindow = new QWaylandSubSurface(this, p, ss);
         }
     } else if (shouldCreateShellSurface()) {
+        Q_ASSERT(!mShellSurface);
+
         mShellSurface = mDisplay->createShellSurface(this);
-    }
+        if (!mShellSurface)
+            qFatal("Could not create a shell surface object.");
+
+        mShellSurface->setType(window()->type(), transientParent());
 
-    if (mShellSurface) {
         // Set initial surface title
         mShellSurface->setTitle(window()->title());
 
@@ -152,17 +160,6 @@ void QWaylandWindow::initWindow()
         }
     }
 
-    if (mShellSurface) {
-        if (window()->transientParent()) {
-            if (window()->type() != Qt::Popup) {
-                mShellSurface->updateTransientParent(window()->transientParent());
-            }
-        } else {
-            if (window()->type() != Qt::ToolTip)
-                mShellSurface->setTopLevel();
-        }
-    }
-
     // Enable high-dpi rendering. Scale() returns the screen scale factor and will
     // typically be integer 1 (normal-dpi) or 2 (high-dpi). Call set_buffer_scale()
     // to inform the compositor that high-resolution buffers will be provided.
@@ -221,6 +218,9 @@ WId QWaylandWindow::winId() const
 
 void QWaylandWindow::setParent(const QPlatformWindow *parent)
 {
+    if (!window()->isVisible())
+        return;
+
     QWaylandWindow *oldparent = mSubSurfaceWindow ? mSubSurfaceWindow->parent() : 0;
     if (oldparent == parent)
         return;
@@ -263,8 +263,7 @@ void QWaylandWindow::setGeometry_helper(const QRect &rect)
         QMargins m = QPlatformWindow::parent()->frameMargins();
         mSubSurfaceWindow->set_position(rect.x() + m.left(), rect.y() + m.top());
         mSubSurfaceWindow->parent()->window()->requestUpdate();
-    } else if (shellSurface() && window()->transientParent() && window()->type() != Qt::Popup)
-        shellSurface()->updateTransientParent(window()->transientParent());
+    }
 }
 
 void QWaylandWindow::setGeometry(const QRect &rect)
@@ -293,20 +292,8 @@ void QWaylandWindow::setGeometry(const QRect &rect)
 void QWaylandWindow::setVisible(bool visible)
 {
     if (visible) {
-        if (mShellSurface) {
-            if (window()->type() == Qt::Popup) {
-                QWaylandWindow *parent = transientParent();
-                if (parent) {
-                    QWaylandWlShellSurface *wlshellSurface = qobject_cast<QWaylandWlShellSurface*>(mShellSurface);
-                    if (wlshellSurface)
-                        wlshellSurface->setPopup(parent, mDisplay->lastInputDevice(), mDisplay->lastInputSerial());
-                }
-            } else if (window()->type() == Qt::ToolTip) {
-                if (QWaylandWindow *parent = transientParent()) {
-                    mShellSurface->updateTransientParent(parent->window());
-                }
-            }
-        }
+        initWindow();
+        mDisplay->flushRequests();
 
         setGeometry(window()->geometry());
         // Don't flush the events here, or else the newly visible window may start drawing, but since
@@ -318,13 +305,8 @@ void QWaylandWindow::setVisible(bool visible)
         // case 'this' will be deleted. When that happens, we must abort right away.
         QPointer<QWaylandWindow> deleteGuard(this);
         QWindowSystemInterface::flushWindowSystemEvents();
-        if (!deleteGuard.isNull()) {
-            attach(static_cast<QWaylandBuffer *>(0), 0, 0);
-            commit();
-            if (mBackingStore) {
-                mBackingStore->hidden();
-            }
-        }
+        if (!deleteGuard.isNull())
+            reset();
     }
 }
 
@@ -357,7 +339,7 @@ void QWaylandWindow::setMask(const QRegion &mask)
         wl_region_destroy(region);
     }
 
-    commit();
+    wl_surface::commit();
 }
 
 void QWaylandWindow::configure(uint32_t edges, int32_t width, int32_t height)
@@ -437,10 +419,19 @@ void QWaylandWindow::requestResize()
 
 void QWaylandWindow::attach(QWaylandBuffer *buffer, int x, int y)
 {
-    if (buffer)
+    mFrameCallback = nullptr;
+
+    if (buffer) {
+        auto callback = frame();
+        wl_callback_add_listener(callback, &QWaylandWindow::callbackListener, this);
+        mFrameCallback = callback;
+        mWaitingForFrameSync = true;
+        buffer->setBusy();
+
         attach(buffer->buffer(), x, y);
-    else
+    } else {
         QtWayland::wl_surface::attach(0, 0, 0);
+    }
 }
 
 void QWaylandWindow::attachOffset(QWaylandBuffer *buffer)
@@ -461,6 +452,18 @@ void QWaylandWindow::damage(const QRect &rect)
     damage(rect.x(), rect.y(), rect.width(), rect.height());
 }
 
+void QWaylandWindow::commit(QWaylandBuffer *buffer, const QRegion &damage)
+{
+    if (!isInitialized())
+        return;
+
+    attachOffset(buffer);
+    const QVector<QRect> rects = damage.rects();
+    for (const QRect &rect: rects)
+        wl_surface::damage(rect.x(), rect.y(), rect.width(), rect.height());
+    wl_surface::commit();
+}
+
 const wl_callback_listener QWaylandWindow::callbackListener = {
     QWaylandWindow::frameCallback
 };
@@ -540,7 +543,7 @@ void QWaylandWindow::handleContentOrientationChange(Qt::ScreenOrientation orient
     }
     set_buffer_transform(transform);
     // set_buffer_transform is double buffered, we need to commit.
-    commit();
+    wl_surface::commit();
 }
 
 void QWaylandWindow::setOrientationMask(Qt::ScreenOrientations mask)
@@ -664,15 +667,13 @@ static QWindow *topLevelWindow(QWindow *window)
 
 QWaylandWindow *QWaylandWindow::transientParent() const
 {
-    if (window()->transientParent()) {
-        // Take the top level window here, since the transient parent may be a QWidgetWindow
-        // or some other window without a shell surface, which is then not able to get mouse
-        // events.
-        return static_cast<QWaylandWindow *>(topLevelWindow(window()->transientParent())->handle());
-    }
-    // Try with the current focus window. It should be the right one and anyway
-    // better than having no parent at all.
-    return mDisplay->lastInputWindow();
+    // Take the top level window here, since the transient parent may be a QWidgetWindow
+    // or some other window without a shell surface, which is then not able to get mouse
+    // events.
+    if (auto transientParent = window()->transientParent())
+        return static_cast<QWaylandWindow *>(topLevelWindow(transientParent)->handle());
+
+    return nullptr;
 }
 
 void QWaylandWindow::handleMouse(QWaylandInputDevice *inputDevice, const QWaylandPointerEvent &e)
diff --git a/src/client/qwaylandwindow_p.h b/src/client/qwaylandwindow_p.h
index d7e7951..94aea73 100644
--- a/src/client/qwaylandwindow_p.h
+++ b/src/client/qwaylandwindow_p.h
@@ -125,6 +125,8 @@ public:
     using QtWayland::wl_surface::damage;
     void damage(const QRect &rect);
 
+    void commit(QWaylandBuffer *buffer, const QRegion &damage);
+
     void waitForFrameSync();
 
     QMargins frameMargins() const Q_DECL_OVERRIDE;
diff --git a/src/client/qwaylandwlshellsurface.cpp b/src/client/qwaylandwlshellsurface.cpp
index 90079c4..838f4bd 100644
--- a/src/client/qwaylandwlshellsurface.cpp
+++ b/src/client/qwaylandwlshellsurface.cpp
@@ -215,6 +215,16 @@ void QWaylandWlShellSurface::setPopup(QWaylandWindow *parent, QWaylandInputDevic
               transientPos.x(), transientPos.y(), 0);
 }
 
+void QWaylandWlShellSurface::setType(Qt::WindowType type, QWaylandWindow *transientParent)
+{
+    if (type == Qt::Popup && transientParent)
+        setPopup(transientParent, m_window->display()->lastInputDevice(), m_window->display()->lastInputSerial());
+    else if (transientParent)
+        updateTransientParent(transientParent->window());
+    else
+        setTopLevel();
+}
+
 void QWaylandWlShellSurface::shell_surface_ping(uint32_t serial)
 {
     pong(serial);
diff --git a/src/client/qwaylandwlshellsurface_p.h b/src/client/qwaylandwlshellsurface_p.h
index 511bf62..a94ecfa 100644
--- a/src/client/qwaylandwlshellsurface_p.h
+++ b/src/client/qwaylandwlshellsurface_p.h
@@ -86,6 +86,8 @@ public:
     void setWindowFlags(Qt::WindowFlags flags) Q_DECL_OVERRIDE;
     void sendProperty(const QString &name, const QVariant &value) Q_DECL_OVERRIDE;
 
+    void setType(Qt::WindowType type, QWaylandWindow *transientParent) override;
+
 private:
     void setGeometry() Q_DECL_OVERRIDE;
     void setMaximized() Q_DECL_OVERRIDE;
@@ -93,8 +95,8 @@ private:
     void setNormal() Q_DECL_OVERRIDE;
     void setMinimized() Q_DECL_OVERRIDE;
 
-    void setTopLevel() Q_DECL_OVERRIDE;
-    void updateTransientParent(QWindow *parent) Q_DECL_OVERRIDE;
+    void setTopLevel();
+    void updateTransientParent(QWindow *parent);
     void setPopup(QWaylandWindow *parent, QWaylandInputDevice *device, int serial);
 
     QWaylandWindow *m_window;
diff --git a/src/client/qwaylandxdgpopup_p.cpp b/src/client/qwaylandxdgpopup_p.cpp
index abc2527..57800f1 100644
--- a/src/client/qwaylandxdgpopup_p.cpp
+++ b/src/client/qwaylandxdgpopup_p.cpp
@@ -56,6 +56,12 @@ QWaylandXdgPopup::~QWaylandXdgPopup()
     delete m_extendedWindow;
 }
 
+void QWaylandXdgPopup::setType(Qt::WindowType type, QWaylandWindow *transientParent)
+{
+    Q_UNUSED(type);
+    Q_UNUSED(transientParent);
+}
+
 }
 
 QT_END_NAMESPACE
diff --git a/src/client/qwaylandxdgpopup_p.h b/src/client/qwaylandxdgpopup_p.h
index b7574dd..3da8dee 100644
--- a/src/client/qwaylandxdgpopup_p.h
+++ b/src/client/qwaylandxdgpopup_p.h
@@ -68,6 +68,8 @@ public:
     QWaylandXdgPopup(struct ::xdg_popup *popup, QWaylandWindow *window);
     virtual ~QWaylandXdgPopup();
 
+    void setType(Qt::WindowType type, QWaylandWindow *transientParent) override;
+
 private:
     QWaylandExtendedSurface *m_extendedWindow;
 };
diff --git a/src/client/qwaylandxdgsurface.cpp b/src/client/qwaylandxdgsurface.cpp
index 7645649..b96b2f8 100644
--- a/src/client/qwaylandxdgsurface.cpp
+++ b/src/client/qwaylandxdgsurface.cpp
@@ -122,17 +122,11 @@ void QWaylandXdgSurface::setMinimized()
     set_minimized();
 }
 
-void QWaylandXdgSurface::setTopLevel()
+void QWaylandXdgSurface::updateTransientParent(QWaylandWindow *parent)
 {
-    // There's no xdg_shell_surface API for this, ignoring
-}
-
-void QWaylandXdgSurface::updateTransientParent(QWindow *parent)
-{
-    QWaylandWindow *parent_wayland_window = static_cast<QWaylandWindow *>(parent->handle());
-    if (!parent_wayland_window)
+    if (!parent)
         return;
-    auto parentXdgSurface = qobject_cast<QWaylandXdgSurface *>(parent_wayland_window->shellSurface());
+    auto parentXdgSurface = qobject_cast<QWaylandXdgSurface *>(parent->shellSurface());
     Q_ASSERT(parentXdgSurface);
     set_parent(parentXdgSurface->object());
 }
@@ -177,6 +171,13 @@ void QWaylandXdgSurface::sendProperty(const QString &name, const QVariant &value
         m_extendedWindow->updateGenericProperty(name, value);
 }
 
+void QWaylandXdgSurface::setType(Qt::WindowType type, QWaylandWindow *transientParent)
+{
+    Q_UNUSED(type)
+    if (transientParent)
+        updateTransientParent(transientParent);
+}
+
 void QWaylandXdgSurface::xdg_surface_configure(int32_t width, int32_t height, struct wl_array *states,uint32_t serial)
 {
     uint32_t *state = reinterpret_cast<uint32_t*>(states->data);
diff --git a/src/client/qwaylandxdgsurface_p.h b/src/client/qwaylandxdgsurface_p.h
index 51c658e..1fa16f7 100644
--- a/src/client/qwaylandxdgsurface_p.h
+++ b/src/client/qwaylandxdgsurface_p.h
@@ -95,14 +95,15 @@ public:
     bool isFullscreen() const { return m_fullscreen; }
     bool isMaximized() const { return m_maximized; }
 
+    void setType(Qt::WindowType type, QWaylandWindow *transientParent) override;
+
 private:
     void setMaximized() Q_DECL_OVERRIDE;
     void setFullscreen() Q_DECL_OVERRIDE;
     void setNormal() Q_DECL_OVERRIDE;
     void setMinimized() Q_DECL_OVERRIDE;
 
-    void setTopLevel() Q_DECL_OVERRIDE;
-    void updateTransientParent(QWindow *parent) Q_DECL_OVERRIDE;
+    void updateTransientParent(QWaylandWindow *parent);
 
 private:
     QWaylandWindow *m_window;
diff --git a/src/hardwareintegration/client/wayland-egl/qwaylandeglwindow.cpp b/src/hardwareintegration/client/wayland-egl/qwaylandeglwindow.cpp
index efed808..bbcbb19 100644
--- a/src/hardwareintegration/client/wayland-egl/qwaylandeglwindow.cpp
+++ b/src/hardwareintegration/client/wayland-egl/qwaylandeglwindow.cpp
@@ -153,6 +153,12 @@ void QWaylandEglWindow::setVisible(bool visible)
 {
     QWaylandWindow::setVisible(visible);
     if (!visible)
+        QMetaObject::invokeMethod(this, "doInvalidateSurface", Qt::QueuedConnection);
+}
+
+void QWaylandEglWindow::doInvalidateSurface()
+{
+    if (!window()->isVisible())
         invalidateSurface();
 }
 
@@ -162,6 +168,10 @@ void QWaylandEglWindow::invalidateSurface()
         eglDestroySurface(m_clientBufferIntegration->eglDisplay(), m_eglSurface);
         m_eglSurface = 0;
     }
+    if (m_waylandEglWindow) {
+        wl_egl_window_destroy(m_waylandEglWindow);
+        m_waylandEglWindow = nullptr;
+    }
 }
 
 EGLSurface QWaylandEglWindow::eglSurface() const
diff --git a/src/hardwareintegration/client/wayland-egl/qwaylandeglwindow.h b/src/hardwareintegration/client/wayland-egl/qwaylandeglwindow.h
index 3657784..b7529c2 100644
--- a/src/hardwareintegration/client/wayland-egl/qwaylandeglwindow.h
+++ b/src/hardwareintegration/client/wayland-egl/qwaylandeglwindow.h
@@ -48,6 +48,7 @@ class QWaylandGLContext;
 
 class QWaylandEglWindow : public QWaylandWindow
 {
+    Q_OBJECT
 public:
     QWaylandEglWindow(QWindow *window);
     ~QWaylandEglWindow();
@@ -68,6 +69,9 @@ public:
     void invalidateSurface() Q_DECL_OVERRIDE;
     void setVisible(bool visible) Q_DECL_OVERRIDE;
 
+private Q_SLOTS:
+    void doInvalidateSurface();
+
 private:
     QWaylandEglClientBufferIntegration *m_clientBufferIntegration;
     struct wl_egl_window *m_waylandEglWindow;
diff --git a/src/hardwareintegration/client/xcomposite-egl/qwaylandxcompositeeglcontext.cpp b/src/hardwareintegration/client/xcomposite-egl/qwaylandxcompositeeglcontext.cpp
index 0a9d93a..bf304d6 100644
--- a/src/hardwareintegration/client/xcomposite-egl/qwaylandxcompositeeglcontext.cpp
+++ b/src/hardwareintegration/client/xcomposite-egl/qwaylandxcompositeeglcontext.cpp
@@ -58,9 +58,7 @@ void QWaylandXCompositeEGLContext::swapBuffers(QPlatformSurface *surface)
 
     QSize size = w->geometry().size();
 
-    w->attach(w->buffer(), 0, 0);
-    w->damage(QRect(QPoint(), size));
-    w->commit();
+    w->commit(w->buffer(), QRegion(0, 0, size.width(), size.height()));
     w->waitForFrameSync();
 }
 
diff --git a/src/hardwareintegration/client/xcomposite-glx/qwaylandxcompositeglxcontext.cpp b/src/hardwareintegration/client/xcomposite-glx/qwaylandxcompositeglxcontext.cpp
index 8445e94..4f7b1fe 100644
--- a/src/hardwareintegration/client/xcomposite-glx/qwaylandxcompositeglxcontext.cpp
+++ b/src/hardwareintegration/client/xcomposite-glx/qwaylandxcompositeglxcontext.cpp
@@ -84,9 +84,7 @@ void QWaylandXCompositeGLXContext::swapBuffers(QPlatformSurface *surface)
 
     glXSwapBuffers(m_display, w->xWindow());
 
-    w->attach(w->buffer(), 0, 0);
-    w->damage(QRect(QPoint(), size));
-    w->commit();
+    w->commit(w->buffer(), QRegion(0, 0, size.width(), size.height()));
     w->waitForFrameSync();
 }
 
diff --git a/tests/auto/client/client/tst_client.cpp b/tests/auto/client/client/tst_client.cpp
index 5a11432..fb527bb 100644
--- a/tests/auto/client/client/tst_client.cpp
+++ b/tests/auto/client/client/tst_client.cpp
@@ -253,8 +253,8 @@ void tst_WaylandClient::backingStore()
 
     window.hide();
 
-    // hiding the window should detach the buffer
-    QTRY_VERIFY(surface->image.isNull());
+    // hiding the window should destroy the surface
+    QTRY_VERIFY(!compositor->surface());
 }
 
 class DndWindow : public QWindow
-- 
2.9.3

