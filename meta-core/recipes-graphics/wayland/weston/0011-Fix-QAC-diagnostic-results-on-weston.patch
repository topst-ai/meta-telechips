From b266a2e608912e15a59b6b2fdd940a147ab3cc21 Mon Sep 17 00:00:00 2001
From: Jay Jeon <inbest@telechips.com>
Date: Wed, 16 Sep 2020 14:36:24 +0900
Subject: [PATCH] Fix QAC diagnostic results on weston

---
 clients/simple-dmabuf-ion.c | 128 ++++++++++++++++++++++----------------------
 1 file changed, 65 insertions(+), 63 deletions(-)

diff --git a/clients/simple-dmabuf-ion.c b/clients/simple-dmabuf-ion.c
index 7bd45f8..9b72b08 100644
--- a/clients/simple-dmabuf-ion.c
+++ b/clients/simple-dmabuf-ion.c
@@ -59,11 +59,11 @@
 #include "shared/weston-egl-ext.h"
 
 #ifndef DRM_FORMAT_MOD_INVALID
-#define DRM_FORMAT_MOD_INVALID ((1ULL << 56) - 1)
+#define DRM_FORMAT_MOD_INVALID ((1ULL << (uint32_t)56) - (uint32_t)1)
 #endif
 
 /* tcc specific macro */
-#define SIZE_ALIGN(value, base) (((value) + ((base)-1)) & ~((base)-1))
+#define SIZE_ALIGN(value, base) (((value) + ((base)-(uint32_t)1)) & ~((base)-(uint32_t)1))
 #define GPU_RGB_ALIGN_SZ (64u)
 #define GPU_YUV_ALIGN_SZ (16u)
 
@@ -98,9 +98,9 @@ struct ion_allocation_data
 /* ION ioctls */
 #define ION_IOC_MAGIC 'I'
 
-#define ION_IOC_ALLOC _IOWR(ION_IOC_MAGIC, 0, struct ion_allocation_data)
-#define ION_IOC_FREE  _IOWR(ION_IOC_MAGIC, 1, struct ion_handle_data)
-#define ION_IOC_SHARE _IOWR(ION_IOC_MAGIC, 4, struct ion_fd_data)
+#define ION_IOC_ALLOC _IOWR((uint32_t)ION_IOC_MAGIC, (uint32_t)0, struct ion_allocation_data)
+#define ION_IOC_FREE  _IOWR((uint32_t)ION_IOC_MAGIC, (uint32_t)1, struct ion_handle_data)
+#define ION_IOC_SHARE _IOWR((uint32_t)ION_IOC_MAGIC, (uint32_t)4, struct ion_fd_data)
 
 /* ION heap types */
 enum ion_heap_type
@@ -113,9 +113,9 @@ enum ion_heap_type
 	ION_NUM_HEAPS = 16
 };
 
-#define ION_HEAP_SYSTEM_MASK        (1 << ION_HEAP_TYPE_SYSTEM)
-#define ION_HEAP_SYSTEM_CONTIG_MASK (1 << ION_HEAP_TYPE_SYSTEM_CONTIG)
-#define ION_HEAP_CARVEOUT_MASK      (1 << ION_HEAP_TYPE_CARVEOUT)
+#define ION_HEAP_SYSTEM_MASK        ((uint32_t)1 << (uint32_t)ION_HEAP_TYPE_SYSTEM)
+#define ION_HEAP_SYSTEM_CONTIG_MASK ((uint32_t)1 << (uint32_t)ION_HEAP_TYPE_SYSTEM_CONTIG)
+#define ION_HEAP_CARVEOUT_MASK      ((uint32_t)1 << (uint32_t)ION_HEAP_TYPE_CARVEOUT)
 
 struct display {
 	struct wl_display *display;
@@ -195,24 +195,24 @@ static const struct wl_buffer_listener buffer_listener = {
 static void
 buffer_free(struct buffer *buf)
 {
-	if (buf->gl_fbo)
+	if (buf->gl_fbo != (GLuint)0)
 		glDeleteFramebuffers(1, &buf->gl_fbo);
 
-	if (buf->gl_texture)
+	if (buf->gl_texture != (GLuint)0)
 		glDeleteTextures(1, &buf->gl_texture);
 
-	if (buf->egl_image) {
+	if (buf->egl_image != 0) {
 		buf->display->egl.destroy_image(buf->display->egl.display,
 						buf->egl_image);
 	}
 
-	if (buf->buffer)
+	if (buf->buffer != 0)
 		wl_buffer_destroy(buf->buffer);
 
-	if (buf->vaddr)
+	if (buf->vaddr != 0)
 		munmap(buf->vaddr, buf->ion_data.len);
 
-	if (buf->ion_data.handle)
+	if (buf->ion_data.handle != 0)
 		ioctl(buf->display->ion_device.dev_fd, ION_IOC_FREE, &buf->ion_data);
 
 	if (buf->dmabuf_fd >= 0)
@@ -288,7 +288,7 @@ create_fbo_for_buffer(struct display *display, struct buffer *buffer)
 	glBindFramebuffer(GL_FRAMEBUFFER, buffer->gl_fbo);
 	glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0,
 			       GL_TEXTURE_2D, buffer->gl_texture, 0);
-	if (glCheckFramebufferStatus(GL_FRAMEBUFFER) != GL_FRAMEBUFFER_COMPLETE) {
+	if ((GLenum)glCheckFramebufferStatus(GL_FRAMEBUFFER) != (GLenum)GL_FRAMEBUFFER_COMPLETE) {
 		fprintf(stderr, "FBO creation failed\n");
 		return false;
 	}
@@ -311,7 +311,7 @@ create_dmabuf_buffer(struct display *display, struct buffer *buffer,
 	buffer->format = format;
 
 	buffer->vaddr = 0;
-	buffer->ion_data.len = width * height * 4; /* hardcoded bpp XRGB8888 = 32/8 = 4 */
+	buffer->ion_data.len = (((uint32_t)width) * ((uint32_t)height) * ((uint32_t)4)); /* hardcoded bpp XRGB8888 = 32/8 = 4 */
 	buffer->ion_data.align = 0;
 	buffer->ion_data.heap_id_mask = ion_user_mask;
 	buffer->ion_data.flags = 0;
@@ -331,7 +331,7 @@ create_dmabuf_buffer(struct display *display, struct buffer *buffer,
 		goto error2;
 	}
 
-	buffer->stride = SIZE_ALIGN(buffer->width * 4, GPU_RGB_ALIGN_SZ);
+	buffer->stride = (uint32_t)SIZE_ALIGN(((uint32_t)buffer->width * (uint32_t)4), (uint32_t)GPU_RGB_ALIGN_SZ);
 	buffer->dmabuf_fd = buffer->ion_dma_data.fd;
 
 	if (buffer->dmabuf_fd < 0) {
@@ -359,13 +359,13 @@ create_dmabuf_buffer(struct display *display, struct buffer *buffer,
 				       0, /* plane_idx */
 				       0, /* offset */
 				       buffer->stride,
-				       modifier >> 32,
-				       modifier & 0xffffffff);
+				       (uint32_t)(modifier >> 32),
+				       (uint32_t)(modifier & 0xffffffff));
 	zwp_linux_buffer_params_v1_add_listener(params, &params_listener, buffer);
 	zwp_linux_buffer_params_v1_create(params,
 					  buffer->width,
 					  buffer->height,
-					  format,
+					  (uint32_t)format,
 					  flags);
 
 	if (!create_fbo_for_buffer(display, buffer))
@@ -421,8 +421,8 @@ create_window(struct display *display, int width, int height)
 	int i;
 	int ret;
 
-	window = zalloc(sizeof *window);
-	if (!window)
+	window = zalloc(sizeof(struct window));
+	if (window == NULL)
 		return NULL;
 
 	window->callback = NULL;
@@ -431,7 +431,7 @@ create_window(struct display *display, int width, int height)
 	window->height = height;
 	window->surface = wl_compositor_create_surface(display->compositor);
 
-	if (display->shell) {
+	if (display->shell != 0) {
 		window->xdg_surface =
 			zxdg_shell_v6_get_xdg_surface(display->shell,
 						      window->surface);
@@ -453,10 +453,10 @@ create_window(struct display *display, int width, int height)
 
 		window->wait_for_configure = true;
 		wl_surface_commit(window->surface);
-	} else if (display->fshell) {
+	} else if (display->fshell != 0) {
 		zwp_fullscreen_shell_v1_present_surface(display->fshell,
 							window->surface,
-							ZWP_FULLSCREEN_SHELL_V1_PRESENT_METHOD_DEFAULT,
+							(uint32_t)ZWP_FULLSCREEN_SHELL_V1_PRESENT_METHOD_DEFAULT,
 							NULL);
 	} else {
 		assert(0);
@@ -464,7 +464,7 @@ create_window(struct display *display, int width, int height)
 
 	for (i = 0; i < NUM_BUFFERS; ++i) {
 		ret = create_dmabuf_buffer(display, &window->buffers[i],
-		                           width, height, DRM_FORMAT_XRGB8888);
+		                           width, height, (int)DRM_FORMAT_XRGB8888);
 
 		if (ret < 0)
 			return NULL;
@@ -478,17 +478,17 @@ destroy_window(struct window *window)
 {
 	int i;
 
-	if (window->callback)
+	if (window->callback != 0)
 		wl_callback_destroy(window->callback);
 
 	for (i = 0; i < NUM_BUFFERS; i++) {
-		if (window->buffers[i].buffer)
+		if (window->buffers[i].buffer != 0)
 			buffer_free(&window->buffers[i]);
 	}
 
-	if (window->xdg_toplevel)
+	if (window->xdg_toplevel != 0)
 		zxdg_toplevel_v6_destroy(window->xdg_toplevel);
-	if (window->xdg_surface)
+	if (window->xdg_surface != 0)
 		zxdg_surface_v6_destroy(window->xdg_surface);
 	wl_surface_destroy(window->surface);
 	free(window);
@@ -500,7 +500,7 @@ window_next_buffer(struct window *window)
 	int i;
 
 	for (i = 0; i < NUM_BUFFERS; i++)
-		if (!window->buffers[i].busy)
+		if (window->buffers[i].busy == 0)
 			return &window->buffers[i];
 
 	return NULL;
@@ -519,9 +519,9 @@ redraw(void *data, struct wl_callback *callback, uint32_t time)
 	struct buffer *buffer;
 
 	buffer = window_next_buffer(window);
-	if (!buffer) {
+	if (buffer == NULL) {
 		fprintf(stderr,
-			!callback ? "Failed to create the first buffer.\n" :
+			(callback == NULL) ? "Failed to create the first buffer.\n" :
 			"All buffers busy at redraw(). Server bug?\n");
 		abort();
 	}
@@ -531,20 +531,20 @@ redraw(void *data, struct wl_callback *callback, uint32_t time)
 
 	/* Cycle between 0 and MAX_STEP */
 	step += step_dir;
-	if (step == 0 || step == MAX_STEP)
+	if ((step == 0) || (step == MAX_STEP))
 		step_dir = -step_dir;
 
-	glClearColor(0.0,
-		     (float) step / MAX_STEP,
-		     1.0 - (float) step / MAX_STEP,
-		     1.0);
+	glClearColor((float)0.0,
+		     (float) step / (float)MAX_STEP,
+		     (float)1.0 - ((float)step / (float)MAX_STEP),
+		     (float)1.0);
 	glClear(GL_COLOR_BUFFER_BIT);
 	glFinish();
 
 	wl_surface_attach(window->surface, buffer->buffer, 0, 0);
 	wl_surface_damage(window->surface, 0, 0, window->width, window->height);
 
-	if (callback)
+	if (callback != NULL)
 		wl_callback_destroy(callback);
 
 	window->callback = wl_surface_frame(window->surface);
@@ -602,10 +602,12 @@ registry_handle_global(void *data, struct wl_registry *registry,
 	} else if (strcmp(interface, "zwp_fullscreen_shell_v1") == 0) {
 		d->fshell = wl_registry_bind(registry,
 					     id, &zwp_fullscreen_shell_v1_interface, 1);
-	} else if (strcmp(interface, "zwp_linux_dmabuf_v1") == 0) {
-		d->dmabuf = wl_registry_bind(registry,
-					     id, &zwp_linux_dmabuf_v1_interface, 1);
-		zwp_linux_dmabuf_v1_add_listener(d->dmabuf, &dmabuf_listener, d);
+	} else {
+		if (strcmp(interface, "zwp_linux_dmabuf_v1") == 0) {
+			d->dmabuf = wl_registry_bind(registry,
+						     id, &zwp_linux_dmabuf_v1_interface, 1);
+			zwp_linux_dmabuf_v1_add_listener(d->dmabuf, &dmabuf_listener, d);
+		}
 	}
 }
 
@@ -623,7 +625,7 @@ static const struct wl_registry_listener registry_listener = {
 static void
 destroy_display(struct display *display)
 {
-	if (display->ion_device.dev_fd)
+	if (display->ion_device.dev_fd != 0)
 		close(display->ion_device.dev_fd);
 
 	if (display->egl.context != EGL_NO_CONTEXT)
@@ -632,22 +634,22 @@ destroy_display(struct display *display)
 	if (display->egl.display != EGL_NO_DISPLAY)
 		eglTerminate(display->egl.display);
 
-	if (display->dmabuf)
+	if (display->dmabuf != 0)
 		zwp_linux_dmabuf_v1_destroy(display->dmabuf);
 
-	if (display->shell)
+	if (display->shell != 0)
 		zxdg_shell_v6_destroy(display->shell);
 
-	if (display->fshell)
+	if (display->fshell != 0)
 		zwp_fullscreen_shell_v1_release(display->fshell);
 
-	if (display->compositor)
+	if (display->compositor != 0)
 		wl_compositor_destroy(display->compositor);
 
-	if (display->registry)
+	if (display->registry != 0)
 		wl_registry_destroy(display->registry);
 
-	if (display->display) {
+	if (display->display != 0) {
 		wl_display_flush(display->display);
 		wl_display_disconnect(display->display);
 	}
@@ -674,12 +676,12 @@ display_set_up_egl(struct display *display)
 		goto error;
 	}
 
-	if (eglInitialize(display->egl.display, &major, &minor) == EGL_FALSE) {
+	if (eglInitialize(display->egl.display, &major, &minor) == (uint32_t)EGL_FALSE) {
 		fprintf(stderr, "Failed to initialize EGLDisplay\n");
 		goto error;
 	}
 
-	if (eglBindAPI(EGL_OPENGL_ES_API) == EGL_FALSE) {
+	if (eglBindAPI(EGL_OPENGL_ES_API) == (uint32_t)EGL_FALSE) {
 		fprintf(stderr, "Failed to bind OpenGL ES API\n");
 		goto error;
 	}
@@ -727,15 +729,15 @@ display_set_up_egl(struct display *display)
 	}
 
 	display->egl.create_image =
-		(void *) eglGetProcAddress("eglCreateImageKHR");
+		(PFNEGLCREATEIMAGEKHRPROC)eglGetProcAddress("eglCreateImageKHR");
 	assert(display->egl.create_image);
 
 	display->egl.destroy_image =
-		(void *) eglGetProcAddress("eglDestroyImageKHR");
+		(PFNEGLDESTROYIMAGEKHRPROC)eglGetProcAddress("eglDestroyImageKHR");
 	assert(display->egl.destroy_image);
 
 	display->egl.image_target_texture_2d =
-		(void *) eglGetProcAddress("glEGLImageTargetTexture2DOES");
+		(PFNGLEGLIMAGETARGETTEXTURE2DOESPROC)eglGetProcAddress("glEGLImageTargetTexture2DOES");
 	assert(display->egl.image_target_texture_2d);
 
 	return true;
@@ -762,7 +764,7 @@ create_display(void)
 {
 	struct display *display = NULL;
 
-	display = zalloc(sizeof *display);
+	display = zalloc(sizeof(struct display));
 	if (display == NULL) {
 		fprintf(stderr, "out of memory\n");
 		goto error;
@@ -785,15 +787,15 @@ create_display(void)
 
 	wl_display_roundtrip(display->display);
 
-	if (!display->xrgb8888_format_found) {
+	if (display->xrgb8888_format_found == 0) {
 		fprintf(stderr, "format XRGB8888 is not available\n");
 		goto error;
 	}
 
-	if (!display_set_up_egl(display))
+	if (display_set_up_egl(display) == false)
 		goto error;
 
-	if (!display_set_up_ion(display, ION_DEVICE))
+	if (display_set_up_ion(display, ION_DEVICE) == false)
 		goto error;
 
 	return display;
@@ -829,10 +831,10 @@ main(int argc, char **argv)
 	}
 
 	display = create_display();
-	if (!display)
+	if (display == NULL)
 		return 1;
 	window = create_window(display, 256, 256);
-	if (!window)
+	if (window == NULL)
 		return 1;
 
 	sigint.sa_handler = signal_int;
@@ -844,7 +846,7 @@ main(int argc, char **argv)
 	 * or error */
 	wl_display_roundtrip(display->display);
 
-	if (!running)
+	if (running == 0)
 		return 1;
 
 	window->initialized = true;
@@ -852,7 +854,7 @@ main(int argc, char **argv)
 	if (!window->wait_for_configure)
 		redraw(window, NULL, 0);
 
-	while (running && ret != -1)
+	while ((running != 0) && (ret != -1))
 		ret = wl_display_dispatch(display->display);
 
 	fprintf(stderr, "simple-dmabuf-ion exiting\n");
-- 
1.9.3

