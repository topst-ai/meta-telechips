diff -Naur patch_01/sys/v4l2/gstv4l2allocator.c 1.16.2-r0/gst-plugins-good-1.16.2/sys/v4l2/gstv4l2allocator.c
--- patch_01/sys/v4l2/gstv4l2allocator.c	2020-06-18 14:19:16.614203451 +0900
+++ 1.16.2-r0/gst-plugins-good-1.16.2/sys/v4l2/gstv4l2allocator.c	2020-06-18 14:25:24.756566193 +0900
@@ -857,7 +857,7 @@
   for (i = 0; i < group->n_mem; i++) {
     if (group->mem[i] == NULL) {
       gpointer data;
-#if TCC_V4L2SINK_DRIVER_USE
+#ifdef TCC_V4L2SINK_DRIVER_USE
       data = obj->mmap (NULL, group->buffer.m.planes[0].length, PROT_READ | PROT_WRITE,
           MAP_SHARED, obj->video_fd, group->buffer.m.planes[0].m.mem_offset);
 #else
@@ -867,13 +867,13 @@
       if (data == MAP_FAILED)
         goto mmap_failed;
 
-#if TCC_V4L2SINK_DRIVER_USE
+#ifdef TCC_V4L2SINK_DRIVER_USE
       GST_LOG_OBJECT (allocator,
           "mmap buffer length %d, data offset %d, plane %d",
-          group->buffer.m.planes[0].length, group->buffer.m.planes[0].data_offset, i);
+          group->buffer.m.planes[0].length, group->buffer.m.planes[0].m.mem_offset, i);
 
       group->mem[i] = (GstMemory *) _v4l2mem_new (0, GST_ALLOCATOR (allocator),
-          NULL, group->planes[i].length, 0, 0, group->planes[i].length, i, data,
+          NULL, group->buffer.m.planes[0].length, 0, 0, group->buffer.m.planes[0].length, i, data,
           -1, group);
 #else
       GST_LOG_OBJECT (allocator,
diff -Naur patch_01/sys/v4l2/gstv4l2bufferpool.c 1.16.2-r0/gst-plugins-good-1.16.2/sys/v4l2/gstv4l2bufferpool.c
--- patch_01/sys/v4l2/gstv4l2bufferpool.c	2020-06-18 14:19:16.615203460 +0900
+++ 1.16.2-r0/gst-plugins-good-1.16.2/sys/v4l2/gstv4l2bufferpool.c	2020-06-18 15:40:16.330757899 +0900
@@ -2338,6 +2338,183 @@
   }
 }
 
+/**
+ * gst_v4l2_buffer_pool_preroll_process:
+ * @bpool: a #GstBufferPool
+ * @buf: a #GstBuffer, maybe be replaced
+ *
+ * Process @buf in @bpool. For output devices, this functions send the contents of
+ * @buf to the device for playback.
+ *
+ * Returns: %GST_FLOW_OK on success.
+ */
+GstFlowReturn
+gst_v4l2_buffer_pool_preroll_process (GstV4l2BufferPool * pool, GstBuffer ** buf)
+{
+  GstFlowReturn ret = GST_FLOW_OK;
+  GstBufferPool *bpool = GST_BUFFER_POOL_CAST (pool);
+  GstV4l2Object *obj = pool->obj;
+
+  GST_DEBUG_OBJECT (pool, "process buffer %p", buf);
+
+  if (GST_BUFFER_POOL_IS_FLUSHING (pool))
+    return GST_FLOW_FLUSHING;
+
+  switch (obj->type) {
+    case V4L2_BUF_TYPE_VIDEO_OUTPUT:
+    case V4L2_BUF_TYPE_VIDEO_OUTPUT_MPLANE:
+      /* playback */
+      switch (obj->mode) {
+        case GST_V4L2_IO_RW:
+          /* FIXME, do write() */
+          GST_WARNING_OBJECT (pool, "implement write()");
+          break;
+
+        case GST_V4L2_IO_USERPTR:
+        case GST_V4L2_IO_DMABUF_IMPORT:
+        case GST_V4L2_IO_DMABUF:
+        case GST_V4L2_IO_MMAP:
+        {
+          GstBuffer *to_queue = NULL;
+          GstBuffer *buffer;
+          GstV4l2MemoryGroup *group;
+          gint index;
+
+          if ((*buf)->pool != bpool)
+            goto copying;
+
+          if (!gst_v4l2_is_buffer_valid (*buf, &group))
+            goto copying;
+
+          index = group->buffer.index;
+
+          GST_LOG_OBJECT (pool, "processing buffer %i from our pool", index);
+
+          if (pool->buffers[index] != NULL) {
+            GST_LOG_OBJECT (pool, "buffer %i already queued, copying", index);
+            goto copying;
+          }
+
+          /* we can queue directly */
+          to_queue = gst_buffer_ref (*buf);
+
+        copying:
+          if (to_queue == NULL) {
+            GstBufferPoolAcquireParams params = { 0 };
+
+            if(!pool->streaming) {
+              if(!gst_v4l2_buffer_pool_streamon (pool))
+                goto start_failed;
+            }
+
+            GST_LOG_OBJECT (pool, "alloc buffer from our pool");
+
+            /* this can return EOS if all buffers are outstanding which would
+             * be strange because we would expect the upstream element to have
+             * allocated them and returned to us.. */
+            params.flags = GST_BUFFER_POOL_ACQUIRE_FLAG_DONTWAIT;
+            ret = gst_buffer_pool_acquire_buffer (bpool, &to_queue, &params);
+            if (ret != GST_FLOW_OK){
+              GST_WARNING_OBJECT (pool,"fail(%d) gst_buffer_pool_acquire_buffer",ret);
+              goto acquire_failed;
+            }
+
+            ret = gst_v4l2_buffer_pool_prepare_buffer (pool, to_queue, *buf);
+            if (ret != GST_FLOW_OK) {
+              GST_WARNING_OBJECT (pool,"fail(%d) gst_v4l2_buffer_pool_prepare_buffer",ret);
+              gst_buffer_unref (to_queue);
+              goto prepare_failed;
+            }
+
+            /* retreive the group */
+            gst_v4l2_is_buffer_valid (to_queue, &group);
+          }
+
+          if ((ret = gst_v4l2_buffer_pool_qbuf (pool, to_queue, group))
+              != GST_FLOW_OK)
+            goto queue_failed;
+
+          /* Remove our ref, we will still hold this buffer in acquire as needed,
+           * otherwise the pool will think it is outstanding and will refuse to stop. */
+          gst_buffer_unref (to_queue);
+
+          /* release as many buffer as possible */
+          while (gst_v4l2_buffer_pool_dqbuf (pool, &buffer, FALSE) ==
+              GST_FLOW_OK) {
+            if (buffer->pool == NULL)
+              gst_v4l2_buffer_pool_release_buffer (bpool, buffer);
+          }
+
+          if (g_atomic_int_get (&pool->num_queued) >= pool->min_latency) {
+            /* all buffers are queued, try to dequeue one and release it back
+             * into the pool so that _acquire can get to it again. */
+            ret = gst_v4l2_buffer_pool_dqbuf (pool, &buffer, TRUE);
+            if (ret == GST_FLOW_OK && buffer->pool == NULL)
+              /* release the rendered buffer back into the pool. This wakes up any
+               * thread waiting for a buffer in _acquire(). */
+              gst_v4l2_buffer_pool_release_buffer (bpool, buffer);
+          }
+          break;
+        }
+        default:
+          g_assert_not_reached ();
+          break;
+      }
+      break;
+    default:
+      g_assert_not_reached ();
+      break;
+  }
+done:
+  return ret;
+
+  /* ERRORS */
+copy_failed:
+  {
+    GST_ERROR_OBJECT (pool, "failed to copy buffer");
+    return ret;
+  }
+buffer_truncated:
+  {
+    GST_WARNING_OBJECT (pool,
+        "Dropping truncated buffer, this is likely a driver bug.");
+    gst_buffer_unref (*buf);
+    *buf = NULL;
+    return GST_V4L2_FLOW_CORRUPTED_BUFFER;
+  }
+eos:
+  {
+    GST_DEBUG_OBJECT (pool, "end of stream reached");
+    gst_buffer_unref (*buf);
+    *buf = NULL;
+    return GST_V4L2_FLOW_LAST_BUFFER;
+  }
+acquire_failed:
+  {
+    if (ret == GST_FLOW_FLUSHING)
+      GST_DEBUG_OBJECT (pool, "flushing");
+    else
+      GST_WARNING_OBJECT (pool, "failed to acquire a buffer: %s",
+          gst_flow_get_name (ret));
+    return ret;
+  }
+prepare_failed:
+  {
+    GST_ERROR_OBJECT (pool, "failed to prepare data");
+    return ret;
+  }
+queue_failed:
+  {
+    GST_ERROR_OBJECT (pool, "failed to queue buffer");
+    return ret;
+  }
+start_failed:
+  {
+    GST_ERROR_OBJECT (pool, "failed to start streaming");
+    return GST_FLOW_ERROR;
+  }
+}
+
 void
 gst_v4l2_buffer_pool_set_other_pool (GstV4l2BufferPool * pool,
     GstBufferPool * other_pool)
diff -Naur patch_01/sys/v4l2/gstv4l2sink.c 1.16.2-r0/gst-plugins-good-1.16.2/sys/v4l2/gstv4l2sink.c
--- patch_01/sys/v4l2/gstv4l2sink.c	2020-06-18 14:19:16.617203476 +0900
+++ 1.16.2-r0/gst-plugins-good-1.16.2/sys/v4l2/gstv4l2sink.c	2020-06-18 16:04:17.219482382 +0900
@@ -300,6 +300,8 @@
   basesink_class->unlock = GST_DEBUG_FUNCPTR (gst_v4l2sink_unlock);
   basesink_class->unlock_stop = GST_DEBUG_FUNCPTR (gst_v4l2sink_unlock_stop);
 
+  basesink_class->preroll             = GST_DEBUG_FUNCPTR(gst_v4l2sink_preroll_show_frame);
+
   videosink_class->show_frame = GST_DEBUG_FUNCPTR (gst_v4l2sink_show_frame);
 
   klass->v4l2_class_devices = NULL;
@@ -362,6 +364,250 @@
   RECT_HEIGHT_SET = 0x08
 };
 
+#ifdef TCC_V4L2SINK_DRIVER_USE
+static int tcc_read_sysfs(char* fullpath)
+{
+  int ret = -1;
+  FILE* fp;
+  fp = fopen(fullpath, "r");
+  if(fp)
+  {
+    fscanf(fp, "%d", &ret);
+    fclose(fp);
+  }
+
+  return ret;
+}
+
+static int tcc_get_display_info(int* isExtendDisplay, int* width, int* height)
+{
+  FILE* fp;
+  int read_display;
+  int read_width, read_height;
+
+  if(!isExtendDisplay || !width || !height)
+  {
+    g_print("[%d][%s] parameters error\n", __LINE__, __func__);
+    return -1;
+  }
+
+  read_display = tcc_read_sysfs("/sys/class/tcc_dispman/tcc_dispman/tcc_output_mode_detected");
+  if(read_display == 1)
+  {
+    read_width = tcc_read_sysfs("/sys/class/tcc_dispman/tcc_dispman/tcc_output_dispdev_width");
+    read_height = tcc_read_sysfs("/sys/class/tcc_dispman/tcc_dispman/tcc_output_dispdev_height");
+    g_print("[%d][%s] ExtendDisplay Resolution %dx%d\n", __LINE__, __func__, read_width, read_height);
+  }
+  else if(read_display == 0)
+  {
+    read_width = tcc_read_sysfs("/sys/class/tcc_dispman/tcc_dispman/tcc_output_panel_width");
+    read_height = tcc_read_sysfs("/sys/class/tcc_dispman/tcc_dispman/tcc_output_panel_height");
+    g_print("[%d][%s] LCD Resolution %dx%d\n", __LINE__, __func__, read_width, read_height);
+  }
+  else
+  {
+    g_print("[%d][%s] sysfs read error\n", __LINE__, __func__);
+    return -1;
+  }
+
+  *isExtendDisplay = read_display;
+  *width = read_width;
+  *height = read_height;
+  return 0;
+}
+
+/******************************************************************************
+*	FUNCTIONS			: TCC_Aspect_Ratio_Calculate_Image
+*	SYNOPSIS			:
+*	EXTERNAL EFFECTS	:
+*	PARAMETERS			:
+*	RETURNS				:
+*	ERRNO				:
+******************************************************************************/
+void TCC_Aspect_Ratio_Calculate_Image (int OriginImg_Width, int OriginImg_Height, int OutBuff_Width, int OutBuff_Height,
+        int *Out_Width, int *Out_Height, int *Out_Offset_Horizontal, int *Out_Offset_Vertical,
+        unsigned int ScreenMode)
+{
+  int DecodedImg_Offset_Horizontal = -1, DecodedImg_Offset_Vertical= -1;
+  int DecodedImg_Width = -1, DecodedImg_Height = -1;
+
+  float src_aspect_ratio;
+  float dst_aspect_ratio;
+
+  /*Source*/
+  src_aspect_ratio = (float)OriginImg_Width/(float)OriginImg_Height;
+  /*Destination*/
+  dst_aspect_ratio = (float)OutBuff_Width/(float)OutBuff_Height;
+
+  //printf("[%s][%d]  (%lf -> %lf)\n", __func__, __LINE__, src_aspect_ratio, dst_aspect_ratio);
+
+  if (ScreenMode == ASPECT_MODE_STANDARD)
+  {
+    if(src_aspect_ratio>dst_aspect_ratio)
+    {
+      DecodedImg_Width = OutBuff_Width;
+      DecodedImg_Height = DecodedImg_Width / src_aspect_ratio;
+    }
+    else
+    {
+      DecodedImg_Height = OutBuff_Height;
+      DecodedImg_Width = DecodedImg_Height * src_aspect_ratio;
+    }
+  }
+  else if(ScreenMode == ASPECT_MODE_ORIGINAL)
+  {
+    if(OriginImg_Width < OutBuff_Width && OriginImg_Height < OutBuff_Height)
+    {
+      DecodedImg_Width = OriginImg_Width;
+      DecodedImg_Height = OriginImg_Height;
+    }
+    else
+    {
+      DecodedImg_Height = OutBuff_Height;
+      DecodedImg_Width = OutBuff_Width;
+    }
+  }
+  else if(ScreenMode == ASPECT_MODE_16_9)
+  {
+    DecodedImg_Width = OutBuff_Width;
+    DecodedImg_Height = (DecodedImg_Width*9)>>4;
+  }
+  else if(ScreenMode == ASPECT_MODE_4_3)
+  {
+    if(dst_aspect_ratio > (4.0f/3.0f))
+    {
+      DecodedImg_Height = OutBuff_Height;
+      DecodedImg_Width = (DecodedImg_Height<<2)/3;
+    }
+    else
+    {
+      DecodedImg_Width = OutBuff_Width;
+      DecodedImg_Height = (DecodedImg_Width*3)>>2;
+    }
+  }
+  else if(ScreenMode == ASPECT_MODE_FULL)
+  {
+    DecodedImg_Height = OutBuff_Height;
+    DecodedImg_Width = OutBuff_Width;
+  }
+
+  DecodedImg_Height = ((int)DecodedImg_Height >> 4 )<< 4; // 16 pixel unit
+  DecodedImg_Width = ((int)DecodedImg_Width >> 4 )<< 4; // 16 pixel unit
+
+  DecodedImg_Offset_Horizontal = (OutBuff_Width - DecodedImg_Width)>>1;
+  DecodedImg_Offset_Vertical = (OutBuff_Height - DecodedImg_Height)>>1;
+
+  *Out_Width = (int)DecodedImg_Width;
+  *Out_Height = (int)DecodedImg_Height;
+  *Out_Offset_Horizontal = DecodedImg_Offset_Horizontal;
+  *Out_Offset_Vertical = DecodedImg_Offset_Vertical;
+}
+
+void gst_v4l2sink_set_aspectratio(GstV4l2Sink *v4l2sink)
+{
+  unsigned int isextended = 0, tcc_output_width = 0, tcc_output_height = 0;
+  unsigned int out_w, out_h, out_w_offset, out_h_offset =0;
+  unsigned int input_width = 0, input_height = 0;
+  int aspectratio ;
+
+  aspectratio = v4l2sink->aspectratio;
+
+  //calculate
+  //printf("[%s] aspectratio=%d\n", __func__, aspectratio);
+  input_width =  GST_V4L2_WIDTH (v4l2sink->v4l2object);
+  input_height =  GST_V4L2_HEIGHT (v4l2sink->v4l2object);
+
+  tcc_get_display_info(&isextended, &tcc_output_width, &tcc_output_height);
+  //printf("[%s %d] overlay info (%d x %d)\n",__func__, __LINE__, tcc_output_width, tcc_output_height);
+  //printf("[%s %d] image(%d x %d)\n", __func__,__LINE__, input_width, input_height);
+  //16byte - aligned.
+  if ( v4l2sink->useroverlay.width > 0 && v4l2sink->useroverlay.height > 0 )
+  {
+    tcc_output_width = v4l2sink->useroverlay.width;
+    tcc_output_height = v4l2sink->useroverlay.height;
+  }
+  else //if( v4l2sink->useroverlay.width == 0 && v4l2sink->useroverlay.height == 0)
+  {
+    if ( tcc_output_width == 0 && tcc_output_height == 0 )
+      return;
+    v4l2sink->useroverlay.width = tcc_output_width;
+    v4l2sink->useroverlay.height = tcc_output_height;
+    v4l2sink->useroverlay.top  = 0;
+    v4l2sink->useroverlay.left = 0;
+  }
+  //printf("[%s %d] overlay info (%d x %d)\n", __func__, __LINE__, tcc_output_width, tcc_output_height);
+  //printf("[%s %d] image(%d x %d)\n", __func__,__LINE__, input_width, input_height);
+
+  if( aspectratio > ASPECT_MODE_INIT && aspectratio < ASPECT_MODE_END)
+  {
+#if 0
+    if( isextended == 0 ) // LCD
+    {
+      if (input_width < (tcc_output_width >> 2) || input_height< (tcc_output_height >> 3))
+      {
+        // because of the scaler limit
+        tcc_output_width = input_width * 2;
+        tcc_output_height = input_height * 3;
+      }
+      else
+      {
+        tcc_output_width = (tcc_output_width & 0xfffffff0);
+        tcc_output_height = (tcc_output_height & 0xfffffff0);
+      }
+    }
+    else if ( isextended == 1 ) // extended , HDMI
+    {
+      if (input_width < (tcc_output_width >> 2) || input_height < (tcc_output_height >> 3))
+      {
+        // because of the scaler limit
+        tcc_output_width = (input_width * 2 & 0xfffffff0);
+        tcc_output_height = (input_height * 2 & 0xfffffff0);
+      }
+      else
+      {
+        tcc_output_width = (tcc_output_width & 0xfffffff0);
+        tcc_output_height = (tcc_output_height & 0xfffffff0);
+      }
+    }
+#else
+    tcc_output_width = v4l2sink->useroverlay.width & 0xfffffff0;
+    tcc_output_height = v4l2sink->useroverlay.height & 0xfffffff0;
+#endif
+    printf("[%s] overlay info 16byte aligned(%d x %d)\n", __func__, tcc_output_width, tcc_output_height);
+    printf("[%s] Video image(%d x %d)\n", __func__, input_width, input_height);
+
+    TCC_Aspect_Ratio_Calculate_Image(input_width, input_height, tcc_output_width, tcc_output_height,
+               &out_w, &out_h, &out_w_offset, &out_h_offset, aspectratio);
+
+    printf("[%s][%d] Aspect ratio property[%d] Output image(%d X %d) Output ratio=%lf\n", __func__, __LINE__, aspectratio, out_w, out_h, (float)out_w/(float)out_h);
+
+    if ( out_w >=0  && out_h >=0 &&  out_w_offset >=0 && out_h_offset >=0)
+    {
+      v4l2sink->overlay.left = out_w_offset + v4l2sink->useroverlay.left;
+      v4l2sink->overlay.top = out_h_offset+ v4l2sink->useroverlay.top;
+      v4l2sink->overlay.width = out_w;
+      v4l2sink->overlay.height = out_h;
+      v4l2sink->overlay_fields_set = 0xffff;
+    }
+    else
+    {
+      //printf("[%s] not valid value\n", __func__);
+      v4l2sink->overlay_fields_set = 0;
+      return;
+    }
+    v4l2sink->oldaspectratio = v4l2sink->aspectratio;
+  }
+  else
+  {
+    v4l2sink->overlay.left = v4l2sink->useroverlay.left;
+    v4l2sink->overlay.top = v4l2sink->useroverlay.top;
+    v4l2sink->overlay.width = v4l2sink->useroverlay.width;
+    v4l2sink->overlay.height = v4l2sink->useroverlay.height;
+    v4l2sink->overlay_fields_set = 0xffff;
+  }
+}
+#endif
+
 static void
 gst_v4l2sink_sync_overlay_fields (GstV4l2Sink * v4l2sink)
 {
@@ -446,6 +692,12 @@
     if (v4l2sink->crop_fields_set & RECT_HEIGHT_SET)
       crop.c.height = v4l2sink->crop.height;
 
+      obj->crop.c.top = v4l2sink->crop.top;
+      obj->crop.c.left = v4l2sink->crop.left;
+      /* Please set the width or height value to a nonzero value.
+      If the width or height is zero, the v4l2 driver can not change the crop setting. */
+      obj->crop.c.width = v4l2sink->crop.width;
+      obj->crop.c.height = v4l2sink->crop.height;
     if (obj->ioctl (obj->video_fd, VIDIOC_S_CROP, &crop) < 0) {
       GST_WARNING_OBJECT (v4l2sink, "VIDIOC_S_CROP failed");
       return;
@@ -491,6 +743,55 @@
         v4l2sink->overlay_fields_set |= RECT_HEIGHT_SET;
         gst_v4l2sink_sync_overlay_fields (v4l2sink);
         break;
+#if defined(TCC_V4L2SINK_DRIVER_USE)
+      case PROP_OVERLAY_SET_TOP:
+        v4l2sink->overlay.top = g_value_get_int(value);
+        if(v4l2sink->overlay.top >= 0)
+        {
+          v4l2sink->useroverlay.top = v4l2sink->overlay.top;
+          v4l2sink->overlay_fields_set |= RECT_TOP_SET;
+        }
+        break;
+      case PROP_OVERLAY_SET_LEFT:
+        v4l2sink->overlay.left = g_value_get_int(value);
+        if(v4l2sink->overlay.left >= 0)
+        {
+          v4l2sink->useroverlay.left = v4l2sink->overlay.left;
+          v4l2sink->overlay_fields_set |= RECT_LEFT_SET;
+        }
+        break;
+      case PROP_OVERLAY_SET_WIDTH:
+        v4l2sink->overlay.width = g_value_get_uint(value);
+        if(v4l2sink->overlay.width >= 0)
+        {
+          v4l2sink->useroverlay.width = v4l2sink->overlay.width;
+          v4l2sink->overlay_fields_set |= RECT_WIDTH_SET;
+        }
+        break;
+      case PROP_OVERLAY_SET_HEIGHT:
+        v4l2sink->overlay.height = g_value_get_uint(value);
+        if(v4l2sink->overlay.height >= 0)
+        {
+          v4l2sink->useroverlay.height = v4l2sink->overlay.height;
+          v4l2sink->overlay_fields_set |= RECT_HEIGHT_SET;
+        }
+        break;
+      case PROP_OVERLAY_SET_UPDATE:
+        if(g_value_get_uint(value))
+        {
+          GstBaseSink *basesink;
+          basesink = GST_BASE_SINK (v4l2sink);
+          GST_BASE_SINK_PREROLL_LOCK(basesink);
+          gst_v4l2sink_set_aspectratio((v4l2sink));
+          gst_v4l2sink_sync_overlay_fields(v4l2sink);
+          if(v4l2sink->lastbuffer != NULL && GST_STATE(v4l2sink) >= GST_STATE_PAUSED)
+          {
+            gst_v4l2sink_show_lastframe(v4l2sink, v4l2sink->lastbuffer);
+          }
+          GST_BASE_SINK_PREROLL_UNLOCK(basesink);
+        }
+        break;
+#endif
       case PROP_CROP_TOP:
         v4l2sink->crop.top = g_value_get_int (value);
         v4l2sink->crop_fields_set |= RECT_TOP_SET;
@@ -511,6 +812,60 @@
         v4l2sink->crop_fields_set |= RECT_HEIGHT_SET;
         gst_v4l2sink_sync_crop_fields (v4l2sink);
         break;
+#if defined(TCC_V4L2SINK_DRIVER_USE)
+      case PROP_CROP_SET_TOP:
+        v4l2sink->crop.top = g_value_get_int(value);
+        v4l2sink->crop_fields_set |= RECT_TOP_SET;
+        break;
+      case PROP_CROP_SET_LEFT:
+        v4l2sink->crop.left = g_value_get_int(value);
+        v4l2sink->crop_fields_set |= RECT_LEFT_SET;
+        break;
+      case PROP_CROP_SET_WIDTH:
+        v4l2sink->crop.width = g_value_get_uint(value);
+        v4l2sink->crop_fields_set |= RECT_WIDTH_SET;
+        break;
+      case PROP_CROP_SET_HEIGHT:
+        v4l2sink->crop.height = g_value_get_uint(value);
+        v4l2sink->crop_fields_set |= RECT_HEIGHT_SET;
+        break;
+      case PROP_CROP_SET_UPDATE:
+        if(g_value_get_uint(value))
+          gst_v4l2sink_sync_crop_fields(v4l2sink);
+        break;
+      case PROP_SET_DELAY:
+        v4l2sink->delay = g_value_get_uint(value);
+        GST_DEBUG_OBJECT(v4l2sink, "delay after show frame = %dus", v4l2sink->delay);
+        break;
+      case PROP_ASPECT_RATIO:
+        {
+          v4l2sink->aspectratio = g_value_get_uint(value);
+          //printf("%s %d aspect ratio = %d v4l2sink->oldaspectratio =%d state=%d\n", __func__,__LINE__,v4l2sink->aspectratio,v4l2sink->oldaspectratio, GST_STATE(v4l2sink));
+          if(v4l2sink->oldaspectratio  != v4l2sink->aspectratio)
+          {
+            GST_DEBUG_OBJECT(v4l2sink, "aspect ratio = %d", v4l2sink->aspectratio);
+
+            if(GST_STATE(v4l2sink) == GST_STATE_PLAYING || GST_STATE(v4l2sink) == GST_STATE_READY)
+            {
+              gst_v4l2sink_set_aspectratio(v4l2sink);
+              gst_v4l2sink_sync_overlay_fields(v4l2sink);
+            }
+            else if(GST_STATE(v4l2sink) == GST_STATE_PAUSED)
+            {
+              gst_v4l2sink_set_aspectratio(v4l2sink);
+              gst_v4l2sink_sync_overlay_fields(v4l2sink);
+
+              if(v4l2sink->lastbuffer != NULL) 
+                gst_v4l2sink_show_lastframe(v4l2sink, v4l2sink->lastbuffer);
+            }
+          }
+          else
+          {
+            printf("%s %d aspect ratio = %d same value \n", __func__,__LINE__,v4l2sink->aspectratio);
+          }
+        }
+        break;
+#endif
       default:
         G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
         break;
@@ -552,6 +907,20 @@
       case PROP_CROP_HEIGHT:
         g_value_set_uint (value, v4l2sink->crop.height);
         break;
+#if defined(TCC_V4L2SINK_DRIVER_USE)
+      case PROP_OVERLAY_SET_TOP:
+        g_value_set_int(value, v4l2sink->overlay.top);
+        break;
+      case PROP_OVERLAY_SET_LEFT:
+        g_value_set_int(value, v4l2sink->overlay.left);
+        break;
+      case PROP_OVERLAY_SET_WIDTH:
+        g_value_set_uint(value, v4l2sink->overlay.width);
+        break;
+      case PROP_OVERLAY_SET_HEIGHT:
+        g_value_set_uint(value, v4l2sink->overlay.height);
+        break;
+#endif
       default:
         G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
         break;
@@ -583,6 +952,13 @@
 
   switch (transition) {
     case GST_STATE_CHANGE_PAUSED_TO_READY:
+#ifdef TCC_V4L2SINK_DRIVER_USE
+      if(v4l2sink->lastbuffer != NULL)
+      {
+        gst_buffer_unref(v4l2sink->lastbuffer);
+      }
+      v4l2sink->lastbuffer = NULL;
+#endif
       if (!gst_v4l2_object_stop (v4l2sink->v4l2object))
         return GST_STATE_CHANGE_FAILURE;
       break;
@@ -640,7 +1016,9 @@
 
   if (!gst_v4l2_object_set_format (obj, caps, &error))
     goto invalid_format;
-
+#ifdef TCC_V4L2SINK_DRIVER_USE
+  gst_v4l2sink_set_aspectratio(v4l2sink);
+#endif
   gst_v4l2sink_sync_overlay_fields (v4l2sink);
   gst_v4l2sink_sync_crop_fields (v4l2sink);
 
@@ -702,6 +1080,66 @@
   return TRUE;
 }
 
+#ifdef TCC_V4L2SINK_DRIVER_USE
+GstFlowReturn gst_v4l2sink_show_lastframe(GstBaseSink *bsink, GstBuffer *buf)
+{
+    GstFlowReturn ret;
+    GstV4l2Sink *v4l2sink = GST_V4L2SINK(bsink);
+    GstV4l2Object *obj = v4l2sink->v4l2object;
+
+    GST_DEBUG_OBJECT(v4l2sink, "render buffer: %p", buf);
+
+    if(G_UNLIKELY(obj->pool == NULL))
+        goto not_negotiated;
+
+    ret = gst_v4l2_buffer_pool_process(GST_V4L2_BUFFER_POOL_CAST(obj->pool), &buf);
+
+    // Sleep during delay time after output every frame for debugging
+    if(v4l2sink->delay)
+        usleep(v4l2sink->delay);
+
+    return ret;
+
+    /* ERRORS */
+not_negotiated:
+    {
+        GST_ERROR_OBJECT(bsink, "not negotiated");
+        return GST_FLOW_NOT_NEGOTIATED;
+    }
+}
+#endif
+
+void gst_v4l2sink_last_frame_update(GstV4l2Sink *v4l2sink, GstBuffer *buf)
+{
+  GstMapInfo map;
+  gsize framesize, framesize_last;
+
+  framesize = gst_buffer_get_size(buf);
+  //printf("%s %d %d %d\n",__func__,__LINE__, framesize, obj->sizeimage);
+
+  if(v4l2sink->lastbuffer == NULL)
+  {
+    v4l2sink->lastbuffer = gst_buffer_new_and_alloc(framesize);
+  }
+  else
+  {
+    framesize_last  = gst_buffer_get_size(v4l2sink->lastbuffer);
+
+    if(framesize_last != framesize)
+    {
+      gst_buffer_unref(v4l2sink->lastbuffer);
+
+      v4l2sink->lastbuffer = gst_buffer_new_and_alloc(framesize);
+    }
+  }
+
+  gst_buffer_map(buf, &map, GST_MAP_READ);
+  gst_buffer_fill(v4l2sink->lastbuffer, 0, map.data, framesize);
+  gst_buffer_unmap(buf, &map);
+
+  gst_buffer_resize(v4l2sink->lastbuffer, 0, framesize);
+}
+
 /* called after A/V sync to render frame */
 static GstFlowReturn
 gst_v4l2sink_show_frame (GstVideoSink * vsink, GstBuffer * buf)
@@ -731,6 +1169,10 @@
       goto activate_failed;
   }
 
+#ifdef TCC_V4L2SINK_DRIVER_USE
+  gst_v4l2sink_last_frame_update(v4l2sink, buf);
+#endif
+
   gst_buffer_ref (buf);
 again:
   ret = gst_v4l2_buffer_pool_process (GST_V4L2_BUFFER_POOL_CAST (obj->pool),
@@ -744,6 +1186,72 @@
 
   return ret;
 
+  /* ERRORS */
+not_negotiated:
+  {
+    GST_ERROR_OBJECT (v4l2sink, "not negotiated");
+    return GST_FLOW_NOT_NEGOTIATED;
+  }
+activate_failed:
+  {
+    GST_ELEMENT_ERROR (v4l2sink, RESOURCE, SETTINGS,
+        (_("Failed to allocated required memory.")),
+        ("Buffer pool activation failed"));
+    return GST_FLOW_ERROR;
+  }
+}
+
+static GstFlowReturn gst_v4l2sink_preroll_show_frame (GstBaseSink *bsink, GstBuffer * buf)
+{
+  GstFlowReturn ret;
+  GstV4l2Sink *v4l2sink = GST_V4L2SINK (bsink);
+  GstV4l2Object *obj = v4l2sink->v4l2object;
+  GstBufferPool *bpool = GST_BUFFER_POOL (obj->pool);
+
+  GST_DEBUG_OBJECT (v4l2sink, "render buffer: %p", buf);
+
+  if (G_UNLIKELY (obj->pool == NULL))
+    goto not_negotiated;
+
+  if (G_UNLIKELY (!gst_buffer_pool_is_active (bpool))) {
+    GstStructure *config;
+
+    /* this pool was not activated, configure and activate */
+    GST_DEBUG_OBJECT (v4l2sink, "activating pool");
+
+    config = gst_buffer_pool_get_config (bpool);
+    gst_buffer_pool_config_add_option (config,
+        GST_BUFFER_POOL_OPTION_VIDEO_META);
+    gst_buffer_pool_set_config (bpool, config);
+
+    if (!gst_buffer_pool_set_active (bpool, TRUE))
+      goto activate_failed;
+  }
+
+#ifdef TCC_V4L2SINK_DRIVER_USE
+  gst_v4l2sink_last_frame_update(v4l2sink, buf);
+#endif
+
+  {
+    GstState state;
+    GstState pending;
+    GstStateChangeReturn change_ret;
+    change_ret = gst_element_get_state(GST_ELEMENT_CAST(bsink), &state, &pending, 0);
+
+    //[ID086A-339][ID083A-440]
+    if(change_ret == GST_STATE_CHANGE_ASYNC
+      && state == GST_STATE_READY
+      && pending == GST_STATE_PAUSED)
+    {
+      ret = GST_FLOW_OK;
+      GST_WARNING_OBJECT(bsink, "skip preroll change_ret %d , state %d , pending %d ",change_ret,state,pending);
+    }
+    else
+      ret = gst_v4l2_buffer_pool_preroll_process(GST_V4L2_BUFFER_POOL_CAST(obj->pool), &buf);
+  }
+
+  return ret;
+
   /* ERRORS */
 not_negotiated:
   {
diff -Naur patch_01/sys/v4l2/gstv4l2sink.h 1.16.2-r0/gst-plugins-good-1.16.2/sys/v4l2/gstv4l2sink.h
--- patch_01/sys/v4l2/gstv4l2sink.h	2020-06-18 14:19:16.617203476 +0900
+++ 1.16.2-r0/gst-plugins-good-1.16.2/sys/v4l2/gstv4l2sink.h	2020-06-18 16:04:32.666934660 +0900
@@ -72,7 +72,6 @@
   gint aspectratio;
   gint oldaspectratio;
   GstBuffer *lastbuffer;
-
 #endif
 };
 
